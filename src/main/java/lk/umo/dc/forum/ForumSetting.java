/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.umo.dc.forum;

import lk.umo.dc.bootstrap.Bootstrap;
import lk.umo.dc.bootstrap.BootstrapShutdownHook;
import lk.umo.dc.bootstrap.response.RegResponse;
import lk.umo.dc.config.BootstrapServerConfig;
import lk.umo.dc.config.NodeContext;
import lk.umo.dc.domain.model.FileManager;
import lk.umo.dc.listner.Listener;
import lk.umo.dc.listner.UdpListener;
import lk.umo.dc.messaging.broadcast.MessageCache;
import lk.umo.dc.util.SearchUtil;
import java.awt.Color;
import java.io.*;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import lk.umo.dc.messaging.broadcast.CommentBroadCastUtil;
import lk.umo.dc.sevice.CommentService;
import lk.umo.dc.sevice.FileRatingService;

/**
 *
 * @author yasitham
 */
public class ForumSetting extends javax.swing.JFrame {

    private static final Logger LOGGER = LogManager.getLogger(ForumSetting.class.getName());

    private static DefaultListModel resultListModel = new DefaultListModel<String>();

    /**
     * Creates new form ForumSetting
     */
    public ForumSetting() {
        initComponents();
        InetAddress ip = null;
        try {
            ip = InetAddress.getLocalHost();
            System.out.println("Node IP address : " + ip.getHostAddress());
        } catch (Exception e) {
            e.printStackTrace();
        }
        txtNodeIp.setText(ip.getHostAddress());
        NodePort.setText(Integer.toString((int) (Math.random() * (3000 - 1023) + 1023)));
        LoadFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupfileRatings = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        NodePort = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        NodeName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNodeIp = new javax.swing.JTextField();
        bsRegButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bsPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bsIP = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLocalFileNames = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<String>();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        keyWord = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        spTtl = new javax.swing.JSpinner();
        searchButton = new javax.swing.JButton();
        lblFileName = new javax.swing.JLabel();
        bsUnRegButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Forum");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(435, 509));
        setName("PeerConfig"); // NOI18N
        setPreferredSize(new java.awt.Dimension(635, 472));
        setResizable(false);
        setSize(new java.awt.Dimension(1137, 552));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Node Port:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));
        getContentPane().add(NodePort, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 54, -1));

        jLabel11.setText("Node IP:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 47, -1, -1));
        getContentPane().add(NodeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 128, -1));

        jLabel4.setText("Node Name:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 16, -1, -1));
        getContentPane().add(txtNodeIp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 128, -1));

        bsRegButton.setText("Register");
        bsRegButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsRegButtonActionPerformed(evt);
            }
        });
        getContentPane().add(bsRegButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 142, -1));

        jLabel2.setText("BS Port:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, -1, -1));
        getContentPane().add(bsPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 54, -1));

        jLabel1.setText("BS IP:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        bsIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsIPActionPerformed(evt);
            }
        });
        getContentPane().add(bsIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 128, -1));

        lblStatus.setBackground(new java.awt.Color(158, 158, 158));
        lblStatus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(101, 101, 101));
        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStatus.setText("OFFLINE");
        lblStatus.setFocusable(false);
        lblStatus.setOpaque(true);
        getContentPane().add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 39, 71, 29));

        txtLocalFileNames.setEditable(false);
        txtLocalFileNames.setColumns(20);
        txtLocalFileNames.setRows(5);
        txtLocalFileNames.setPreferredSize(new java.awt.Dimension(144, 284));
        txtLocalFileNames.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtLocalFileNamesCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(txtLocalFileNames);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 220, 287));

        resultList.setModel(resultListModel);
        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                resultListMouseEntered(evt);
            }
        });
        resultList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(resultList);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 180, 188, 287));

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 340, 160, -1));

        jLabel7.setText("Key Word:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, -1, -1));

        keyWord.setEnabled(false);
        keyWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyWordActionPerformed(evt);
            }
        });
        getContentPane().add(keyWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(531, 234, 80, -1));

        jLabel8.setText("TTL:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, -1, -1));

        spTtl.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(0), null, Integer.valueOf(1)));
        getContentPane().add(spTtl, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 260, 50, -1));

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        getContentPane().add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 310, 160, -1));

        lblFileName.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(lblFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 60, 230, 20));

        bsUnRegButton.setText("Un-register");
        bsUnRegButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsUnRegButtonActionPerformed(evt);
            }
        });
        getContentPane().add(bsUnRegButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 142, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        resultListModel.clear();
        SearchUtil.search(keyWord.getText(), (int) spTtl.getValue());
    }//GEN-LAST:event_searchButtonActionPerformed

    private void keyWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyWordActionPerformed
        resultListModel.clear();
        SearchUtil.search(keyWord.getText(), (int) spTtl.getValue());
    }//GEN-LAST:event_keyWordActionPerformed

    private void bsRegButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsRegButtonActionPerformed
        String bsIpStr = bsIP.getText();
        String bsPortStr = bsPort.getText();

        NodeContext.setIp(txtNodeIp.getText());
        NodeContext.setPort(Integer.parseInt(NodePort.getText()));
        NodeContext.setUserName(NodeName.getText());
        boolean valid = true;
        if (bsIpStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Bootstrap IP cannot be empty");
            valid = false;
        }

        if (bsPortStr.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Bootstrap Port cannot be empty");
            valid = false;
        }

        try {
            int intBsPort = Integer.parseInt(bsPortStr);
            if (!(intBsPort >= 1024 && intBsPort <= 65535)) {
                JOptionPane.showMessageDialog(rootPane, "Bootstrap Port should be a valid port number (1024 - 65535)");
                valid = false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Bootstrap Port should be a valid port number (1024 - 65535)");
            valid = false;
        }

        if (valid) {
            BootstrapServerConfig.setHost(bsIP.getText());
            BootstrapServerConfig.setPort(Integer.parseInt(bsPort.getText()));
            LOGGER.info("BS IP: " + bsIP.getText() + ", BS Port: " + bsPort.getText());

            Listener udpListener = UdpListener.getInstance();
            udpListener.initListener(NodeContext.getPort());

            if (!NodeContext.isOnline()) {
                //if offline

                RegResponse regResponse = null;
                try {
                    regResponse = Bootstrap.register();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(rootPane, "Registration failed!, " + e.getMessage());
                }
                if (regResponse.isRegOk()) {
                    bsUnRegButton.setEnabled(true);
                    bsRegButton.setEnabled(false);
                    NodeContext.setOnline(true);
                    lblStatus.setText("ONLINE");
                    lblStatus.setForeground(Color.GREEN);
                    lblStatus.setBackground(new Color(91, 128, 92));
                    fileNamesUpdate();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Registration failed!, " + regResponse.getStatusMessage());
                }
            } else {

                //if online
            }

            Runtime.getRuntime().addShutdownHook(new BootstrapShutdownHook());
            MessageCache.initCachingScheduler();//init caching scheduler

            keyWord.setEnabled(true);
            searchButton.setEnabled(true);
            txtLocalFileNames.setEnabled(true);
            txtLocalFileNames.setEditable(valid);
            NodeContext.setIp(txtNodeIp.getText());

        }

    }//GEN-LAST:event_bsRegButtonActionPerformed

    private void bsIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bsIPActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        resultListModel.clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void resultListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultListValueChanged

    }//GEN-LAST:event_resultListValueChanged

    private void txtLocalFileNamesCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtLocalFileNamesCaretUpdate
        fileNamesUpdate();
    }//GEN-LAST:event_txtLocalFileNamesCaretUpdate

    private void resultListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseEntered
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {

            if (!resultList.isSelectionEmpty()) {
                String fileName = resultList.getSelectedValue();
                fileName = fileName.substring(fileName.indexOf(":") + 2, fileName.length());
                fileName = fileName.trim();
                new Forum(fileName).setVisible(true);

            }
        }
    }//GEN-LAST:event_resultListMouseEntered

    private void resultListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {

            if (!resultList.isSelectionEmpty()) {
                String fileName = resultList.getSelectedValue();
                fileName = fileName.substring(fileName.indexOf(":") + 2, fileName.length());
                fileName = fileName.trim();
                new Forum(fileName).setVisible(true);

            }
        }
    }//GEN-LAST:event_resultListMouseClicked

    private void bsUnRegButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsUnRegButtonActionPerformed

        if (Bootstrap.unregister()) {
            bsRegButton.setEnabled(true);

            bsRegButton.setText("Register");
            NodeContext.setOnline(false);
            lblStatus.setText("OFFLINE");
            lblStatus.setForeground(Color.GRAY);
            lblStatus.setBackground(Color.LIGHT_GRAY);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Failed to unregister");

        }
    }//GEN-LAST:event_bsUnRegButtonActionPerformed

    public static void addSearchResult(String fileName, String location) {
        synchronized (resultListModel) {
            resultListModel.addElement(location + " : " + fileName);
        }
    }

    public static void clearSearchResult() {
        synchronized (resultListModel) {
            resultListModel.clear();
        }
    }

    private void LoadFiles() {
        List<String> allFiles = new ArrayList<String>(
                Arrays.asList("Adventures of Tintin",
                        "Jack and Jill",
                        "Glee",
                        "The Vampire Diarie",
                        "King Arthur",
                        "Windows XP",
                        "Harry Potter",
                        "Kung Fu Panda",
                        "Lady Gaga",
                        "Twilight",
                        "Windows 8",
                        "Mission Impossible",
                        "Turn Up The Music",
                        "Super Mario",
                        "American Pickers",
                        "Microsoft Office 2010",
                        "Happy Feet",
                        "Modern Family",
                        "American Idol",
                        "Hacking for Dummies",
                        "Adventures of Tintin1",
                        "Jack and Jill1",
                        "Glee1",
                        "The Vampire Diarie1",
                        "King Arthur1",
                        "Windows XP1",
                        "Harry Potter1",
                        "Kung Fu Panda1",
                        "Lady Gaga1",
                        "Twilight1",
                        "Windows 81",
                        "Mission Impossible1",
                        "Turn Up The Music1",
                        "Super Mario1",
                        "American Pickers1",
                        "Microsoft Office 20101",
                        "Happy Feet1",
                        "Modern Family1",
                        "American Idol1",
                        "Hacking for Dummies1",
                        "Adventures of Tintin2",
                        "Jack and Jill2",
                        "Glee2",
                        "The Vampire Diarie2",
                        "King Arthur2",
                        "Windows XP2",
                        "Harry Potter2",
                        "Kung Fu Panda2",
                        "Lady Gaga2",
                        "Twilight2",
                        "Windows 82",
                        "Mission Impossible2",
                        "Turn Up The Music2",
                        "Super Mario2",
                        "American Pickers2",
                        "Microsoft Office 20102",
                        "Happy Feet2",
                        "Modern Family2",
                        "American Idol2",
                        "Hacking for Dummies2",
                        "Adventures of Tintin3",
                        "Jack and Jill3",
                        "Glee3",
                        "The Vampire Diarie3",
                        "King Arthur3",
                        "Windows XP3",
                        "Harry Potter3",
                        "Kung Fu Panda3",
                        "Lady Gaga3",
                        "Twilight3",
                        "Windows 83",
                        "Mission Impossible3",
                        "Turn Up The Music3",
                        "Super Mario3",
                        "American Pickers3",
                        "Microsoft Office 20103",
                        "Happy Feet3",
                        "Modern Family3",
                        "American Idol3",
                        "Hacking for Dummies3")
        );
        Collections.shuffle(allFiles);
        //this.files = allFiles.subList(0, 10);
        for (String file : allFiles.subList(0, 10)) {
            txtLocalFileNames.append(file + "\n");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ForumSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ForumSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ForumSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ForumSetting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForumSetting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NodeName;
    private javax.swing.JTextField NodePort;
    private javax.swing.JTextField bsIP;
    private javax.swing.JTextField bsPort;
    private javax.swing.JButton bsRegButton;
    private javax.swing.JButton bsUnRegButton;
    private javax.swing.ButtonGroup groupfileRatings;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField keyWord;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblStatus;
    private static javax.swing.JList<String> resultList;
    private javax.swing.JButton searchButton;
    public static javax.swing.JSpinner spTtl;
    private javax.swing.JTextArea txtLocalFileNames;
    private javax.swing.JTextField txtNodeIp;
    // End of variables declaration//GEN-END:variables

    public void fileNamesUpdate() {

        String fileNames = txtLocalFileNames.getText();
        if (!fileNames.isEmpty()) {
            FileManager.clear();
            if (fileNames.trim().contains("\n")) {
                String fileNamesArr[] = fileNames.split("\n");
                for (String fileName : fileNamesArr) {
                    FileManager.addFile(fileName);
                    LOGGER.debug("local file: {}", fileName.trim());
                }
            } else {
                FileManager.addFile(fileNames);
                LOGGER.debug("local file: {}", fileNames.trim());
            }
            LOGGER.debug("Files updated");
        }

    }
}
